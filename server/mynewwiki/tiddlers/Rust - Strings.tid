created: 20190702132508573
modified: 20190702133418832
tags: rust software-programming draft
title: Rust - Strings
type: text/vnd.tiddlywiki

Coming soon: how assigning value of a string variable to another variable works

Earlier, we said that when a variable goes out of scope, Rust automatically calls the `drop` function and cleans up the heap memory for that variable. But Figure 4-2 shows both data pointers pointing to the same location. This is a problem: when s2 and s1 go out of scope, they will both try to free the same memory.

This is known as a `double free error` and is one of the memory safety bugs we mentioned previously. 

//Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities.//

```json
let s1 = String::from("hello");
let s2 = s1;

println!("{}, world!", s1);

```

```
error[E0382]: use of moved value: `s1`
 --> src/main.rs:5:28
  |
3 |     let s2 = s1;
  |         -- value moved here
4 |
5 |     println!("{}, world!", s1);
  |                            ^^ value used here after move
  |
  = note: move occurs because `s1` has type `std::string::String`, which does
  not implement the `Copy` trait
```

If you’ve heard the terms shallow copy and deep copy while working with other languages, the concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy. But because Rust also invalidates the first variable, instead of being called a shallow copy, it’s known as a `move`. In this example, we would say that s1 was moved into s2. So what actually happens is shown in Figure 4-4.